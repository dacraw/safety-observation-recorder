// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password Password?
  userPlants UserPlant[]
  observations Observation[]
}

model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique
}

model Organization {
  id Int @id @default(autoincrement())
  auth0OrgId String @unique
  name String
  plants Plant[]
}

model UserPlant {
  id Int @id @default(autoincrement())
  user User @relation(references: [id], fields: [userId])
  userId Int
  plant Plant @relation(references: [id], fields: [plantId])
  plantId Int
}

model Plant {
  id Int @id @default(autoincrement())
  name String 
  organizationId Int
  organization Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade, onUpdate: Cascade)
  observations Observation[]
  categories Category[]
  userPlants UserPlant[]

  @@index([name])
}

model Category {
  id Int @id @default(autoincrement())
  name String
  plantId Int
  plant Plant @relation(fields: [plantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subcategories Subcategory[]
}

model Subcategory {
  id Int @id @default(autoincrement())
  name String
  categoryId Int
  category Category @relation(references: [id], fields: [categoryId], onUpdate: Cascade, onDelete: Cascade)
  questions Question[]
}

model Observation {
  id Int @id @default(autoincrement())
  weekOf DateTime
  plantId Int
  plant Plant @relation(fields: [plantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  user User @relation(fields: [userId], references: [id] )
  responses Response[]
}


model Question {
  id Int @id @default(autoincrement())
  text String
  subcategoryId Int
  subcategory Subcategory @relation(references: [id], fields: [subcategoryId])
  responses Response[]
}

enum ResponseChoice {
  NO_RESPONSE
  CANNOT_DETERMINE
  YES
  NO
}

model Response {
  id Int @id @default(autoincrement())
  choice ResponseChoice
  question Question @relation(references: [id], fields: [questionId])
  questionId Int
  observation Observation @relation(references: [id], fields: [observationId])
  observationId Int
  
}
